№1
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example (Input --> Output):

39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)
999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)
4 --> 0 (because 4 is already a one-digit number)
////////////////////////////////////////////////////////////
function persistence(num) {
  // Базовый случай: если число num имеет только одну цифру, вернуть 0
  if (num < 10) {
    return 0;
  }
  
  // Преобразовать число в строку и разделить на массив цифр
  let digits = num.toString().split('').map(Number);
  
  // Вычислить произведение цифр
  let product = digits.reduce((acc, curr) => acc * curr);
  
  // Рекурсивно вычислить настойчивость произведения, добавив 1 к результату вызова persistence на произведение
  return 1 + persistence(product);
}

№2
Write a function that accepts an integer n and a string s as parameters, and returns a string of s repeated exactly n times.

Examples (input -> output)
6, "I"     -> "IIIIII"
5, "Hello" -> "HelloHelloHelloHelloHello"
////////////////
function repeatStr (n, s) {
  var b="";
  for(let i = 0; i < n; i++){
    b += s;
  }
  return b;
}
