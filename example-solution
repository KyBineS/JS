№1
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example (Input --> Output):

39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)
999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)
4 --> 0 (because 4 is already a one-digit number)
////////////////////////////////////////////////////////////////////////////////////
function persistence(num) {
  // Базовый случай: если число num имеет только одну цифру, вернуть 0
  if (num < 10) {
    return 0;
  }
  
  // Преобразовать число в строку и разделить на массив цифр
  let digits = num.toString().split('').map(Number);
  
  // Вычислить произведение цифр
  let product = digits.reduce((acc, curr) => acc * curr);
  
  // Рекурсивно вычислить настойчивость произведения, добавив 1 к результату вызова persistence на произведение
  return 1 + persistence(product);
}

№2
Write a function that accepts an integer n and a string s as parameters, and returns a string of s repeated exactly n times.

Examples (input -> output)
6, "I"     -> "IIIIII"
5, "Hello" -> "HelloHelloHelloHelloHello"
////////////////
function repeatStr (n, s) {
  var b="";
  for(let i = 0; i < n; i++){
    b += s;
  }
  return b;
}
N3
Digital root is the recursive sum of all the digits in a number.

Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

Examples
    16  -->  1 + 6 = 7
   942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2
/////////////////////////
function digitalRoot(n) {
  // Base case: if n has only one digit, return n
  if (n < 10) {
    return n;
  }
  
  // Convert the number to a string and split into an array of digits
  let digits = n.toString().split('').map(Number);
  
  // Compute the sum of the digits
  let sum = digits.reduce((acc, curr) => acc + curr);
  
  // Recursively compute the digital root of the sum
  return digitalRoot(sum);
}
N4

You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)

////////////////
function findOutlier(integers){
  var n = 0;
  for(let j = 0; j <3; j++){
    if(integers[j] % 2 === 0){
      n +=1;
    }
    
  }
  for(let i = 0; i < integers.length; i++){
    if(n>=2){
      if(integers[i] % 2 != 0){
        return integers[i];
      }
    
    }
    else {
       if(integers[i] % 2 == 0){
        return integers[i];
      }
    }
  }
}
N5

Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.

For example:

uniqueInOrder('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']
uniqueInOrder('ABBCcAD')         == ['A', 'B', 'C', 'c', 'A', 'D']
uniqueInOrder([1,2,2,3,3])       == [1,2,3]

////////////
var uniqueInOrder=function(iterable){
  var res = [];
  var j = 0;
  for(var i=0; i < iterable.length; i++){
    let b = iterable[i];
    if(b != n || i === 0){
    res[j] = iterable[i];
    j += 1;
  }
   var n = iterable[i];
  }
  return res;
  
}
N6

The main idea is to count all the occurring characters in a string. If you have a string like aba, then the result should be {'a': 2, 'b': 1}.

What if the string is empty? Then the result should be empty object literal, {}.

//////
function count(string) {
  if (string.length === 0) {
    return {};
  }

  let charCounts = {};

  for (let i = 0; i < string.length; i++) {
    let char = string[i];

    if (charCounts[char]) {
      charCounts[char]++;
    } else {
      charCounts[char] = 1;
    }
  }

  return charCounts;
}
N7

You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:

[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"
Note: For 4 or more names, the number in "and 2 others" simply increases.

////
function likes(names) {
  let count = names.length;
  
  if (count === 0) {
    return "no one likes this";
  } else if (count === 1) {
    return names[0] + " likes this";
  } else if (count === 2) {
    return names[0] + " and " + names[1] + " like this";
  } else if (count === 3) {
    return names[0] + ", " + names[1] + " and " + names[2] + " like this";
  } else {
    return names[0] + ", " + names[1] + " and " + (count - 2) + " others like this";
  }
}
N8

The Western Suburbs Croquet Club has two categories of membership, Senior and Open. They would like your help with an application form that will tell prospective members which category they will be placed.

To be a senior, a member must be at least 55 years old and have a handicap greater than 7. In this croquet club, handicaps range from -2 to +26; the better the player the lower the handicap.

Input
Input will consist of a list of pairs. Each pair contains information for a single potential member. Information consists of an integer for the person's age and an integer for the person's handicap.

Output
Output will consist of a list of string values (in Haskell and C: Open or Senior) stating whether the respective member is to be placed in the senior or open category.

Example
input =  [[18, 20], [45, 2], [61, 12], [37, 6], [21, 21], [78, 9]]
output = ["Open", "Open", "Senior", "Open", "Open", "Senior"]
////////////////////////////
function openOrSenior(data){
  return data.map(([age, handicap]) => (age > 54 && handicap > 7) ? 'Senior' : 'Open');
}
